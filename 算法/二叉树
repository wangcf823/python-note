from collections import deque
from typing import List, Optional


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

    def build_tree(s: str):
        """
        反序列化字符串生成一棵二叉树
        :param s: 序列化字符串（直接从力扣题目里面复制就行）
        :return: 树的根节点
        """
        if not s:
            return None
        s = s.split(',')

        size = len(s)
        que =deque()
        root = TreeNode(int(s[0]))  #根节点对象
        que.append(root)   #根节点对象加入队列que

        i = 1
        while i < size:  #从第二哥元素开始遍历字符串列表
            node = que.popleft()#取出最左边的节点,赋值给node
            left = TreeNode(int(s[i])) if i < size and s[i] != 'null' else None  #根的左节点对象
            i += 1
            right = TreeNode(int(s[i])) if i < size and s[i] != 'null' else None #根的右节点对象
            i += 1
            node.left, node.right = left, right   #赋值给根节点的左右节点
            if node.left: #如果左节点不为空
                que.append(node.left) #que加入左节点对象
            if node.right:
                que.append(node.right) #que加入右节点对象

        return root    #返回根节点对象


# 举例说明
# s = '1,2,2,3,3,null,null,4,4'
# s = '1,2,null,3,null,4,null,5'
# s = '1,2,2,3,null,null,3,4,null,null,4'
# s = '2,1,3'
# obj = TreeNode.build_tree(s)
# # print(obj)






from TreeNode import TreeNode


def preorder(root: TreeNode):
    if not root:
        return
    print(root.val, end=" ")
    if root.left:
        preorder(root.left)
    if root.right:  # 右子树
        preorder(root.right)
def inorder(root: TreeNode):
    if not root:
        return
    if root.left:  # 左子树
        inorder(root.left)
    print(root.val, end=" ")  # 根
    if root.right:  # 右子树
        inorder(root.right)
def postorder(root: TreeNode):
    if not root:
        return
    if root.left:
        postorder(root.left)
    if root.right:
        postorder(root.right)
    print(root.val, end=" ")

if __name__ == '__main__':
    tree = '4,2,6,1,3,5,7'
    root = TreeNode.build_tree  (tree)

    #先序遍历
    print("先序遍历")
    preorder(root)
    print("\n")

    # 中序遍历
    print("中序遍历")
    inorder(root)
    print("\n")

    # 后序遍历
    print("后序遍历")
    postorder(root)
    print("\n")
